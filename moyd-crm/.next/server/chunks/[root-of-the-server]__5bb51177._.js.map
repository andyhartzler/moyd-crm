{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/moyd-crm/moyd-crm/src/app/messenger/route.js"],"sourcesContent":["import { NextResponse } from 'next/server'\n\nconst BB_HOST = process.env.NEXT_PUBLIC_BLUEBUBBLES_HOST\nconst BB_PASSWORD = process.env.NEXT_PUBLIC_BLUEBUBBLES_PASSWORD\n\nexport async function POST(request) {\n  try {\n    const body = await request.json()\n    const { phone, message, memberId } = body\n\n    if (!phone || !message) {\n      return NextResponse.json(\n        { error: 'Phone and message are required' },\n        { status: 400 }\n      )\n    }\n\n    // Format the chatGuid properly for iMessage\n    // For phone numbers, use: iMessage;-;+15735551234\n    const chatGuid = phone.includes(';') ? phone : `iMessage;-;${phone}`\n\n    // Send message via BlueBubbles REST API\n    // Documentation: https://docs.bluebubbles.app/server/developer-guides/rest-api-and-webhooks\n    const response = await fetch(\n      `${BB_HOST}/api/v1/message/text?password=${BB_PASSWORD}`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          chatGuid: chatGuid,\n          text: message, // BlueBubbles uses \"text\" not \"message\"\n          method: 'private-api', // Use private-api since you have it enabled\n        }),\n      }\n    )\n\n    // BlueBubbles returns JSON with this format:\n    // { status: number, message: string, data?: any, error?: { type: string, error: string } }\n    const result = await response.json()\n\n    if (!response.ok || result.status !== 200) {\n      console.error('BlueBubbles API error:', result)\n      return NextResponse.json(\n        {\n          error: result.error?.error || result.message || 'Failed to send message',\n          details: result\n        },\n        { status: response.status || 500 }\n      )\n    }\n\n    // Success! Now create/update the conversation and message in Supabase\n    if (memberId) {\n      try {\n        const { createClient } = require('@supabase/supabase-js')\n        const supabase = createClient(\n          process.env.NEXT_PUBLIC_SUPABASE_URL,\n          process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n        )\n\n        // Try to find existing conversation\n        const { data: existingConv } = await supabase\n          .from('conversations')\n          .select('id')\n          .eq('member_id', memberId)\n          .single()\n\n        let conversationId = existingConv?.id\n\n        // Create conversation if it doesn't exist\n        if (!conversationId) {\n          const { data: newConv, error: convError } = await supabase\n            .from('conversations')\n            .insert({\n              member_id: memberId,\n              chat_identifier: chatGuid,\n              status: 'active',\n              last_message_at: new Date().toISOString()\n            })\n            .select('id')\n            .single()\n\n          if (convError) {\n            console.error('Error creating conversation:', convError)\n          } else {\n            conversationId = newConv.id\n          }\n        } else {\n          // Update last_message_at\n          await supabase\n            .from('conversations')\n            .update({ last_message_at: new Date().toISOString() })\n            .eq('id', conversationId)\n        }\n\n        // Create message record\n        if (conversationId) {\n          await supabase.from('messages').insert({\n            conversation_id: conversationId,\n            body: message,\n            direction: 'outbound',\n            delivery_status: 'sent',\n            sender_phone: phone,\n            guid: result.data?.guid || `temp_${Date.now()}`,\n          })\n        }\n      } catch (dbError) {\n        console.error('Database error:', dbError)\n        // Don't fail the whole request if DB update fails\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: result.data,\n      message: 'Message sent successfully'\n    })\n  } catch (error) {\n    console.error('Error in send-message API:', error)\n    return NextResponse.json(\n      { error: error.message || 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEC,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG;QAErC,IAAI,CAAC,SAAS,CAAC,SAAS;YACtB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiC,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,4CAA4C;QAC5C,kDAAkD;QAClD,MAAM,WAAW,MAAM,QAAQ,CAAC,OAAO,QAAQ,CAAC,WAAW,EAAE,OAAO;QAEpE,wCAAwC;QACxC,4FAA4F;QAC5F,MAAM,WAAW,MAAM,MACrB,GAAG,QAAQ,8BAA8B,EAAE,aAAa,EACxD;YACE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,UAAU;gBACV,MAAM;gBACN,QAAQ;YACV;QACF;QAGF,6CAA6C;QAC7C,2FAA2F;QAC3F,MAAM,SAAS,MAAM,SAAS,IAAI;QAElC,IAAI,CAAC,SAAS,EAAE,IAAI,OAAO,MAAM,KAAK,KAAK;YACzC,QAAQ,KAAK,CAAC,0BAA0B;YACxC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,OAAO,OAAO,KAAK,EAAE,SAAS,OAAO,OAAO,IAAI;gBAChD,SAAS;YACX,GACA;gBAAE,QAAQ,SAAS,MAAM,IAAI;YAAI;QAErC;QAEA,sEAAsE;QACtE,IAAI,UAAU;YACZ,IAAI;gBACF,MAAM,EAAE,YAAY,EAAE;gBACtB,MAAM,WAAW;gBAKjB,oCAAoC;gBACpC,MAAM,EAAE,MAAM,YAAY,EAAE,GAAG,MAAM,SAClC,IAAI,CAAC,iBACL,MAAM,CAAC,MACP,EAAE,CAAC,aAAa,UAChB,MAAM;gBAET,IAAI,iBAAiB,cAAc;gBAEnC,0CAA0C;gBAC1C,IAAI,CAAC,gBAAgB;oBACnB,MAAM,EAAE,MAAM,OAAO,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,SAC/C,IAAI,CAAC,iBACL,MAAM,CAAC;wBACN,WAAW;wBACX,iBAAiB;wBACjB,QAAQ;wBACR,iBAAiB,IAAI,OAAO,WAAW;oBACzC,GACC,MAAM,CAAC,MACP,MAAM;oBAET,IAAI,WAAW;wBACb,QAAQ,KAAK,CAAC,gCAAgC;oBAChD,OAAO;wBACL,iBAAiB,QAAQ,EAAE;oBAC7B;gBACF,OAAO;oBACL,yBAAyB;oBACzB,MAAM,SACH,IAAI,CAAC,iBACL,MAAM,CAAC;wBAAE,iBAAiB,IAAI,OAAO,WAAW;oBAAG,GACnD,EAAE,CAAC,MAAM;gBACd;gBAEA,wBAAwB;gBACxB,IAAI,gBAAgB;oBAClB,MAAM,SAAS,IAAI,CAAC,YAAY,MAAM,CAAC;wBACrC,iBAAiB;wBACjB,MAAM;wBACN,WAAW;wBACX,iBAAiB;wBACjB,cAAc;wBACd,MAAM,OAAO,IAAI,EAAE,QAAQ,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI;oBACjD;gBACF;YACF,EAAE,OAAO,SAAS;gBAChB,QAAQ,KAAK,CAAC,mBAAmB;YACjC,kDAAkD;YACpD;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM,OAAO,IAAI;YACjB,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO,MAAM,OAAO,IAAI;QAAwB,GAClD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}