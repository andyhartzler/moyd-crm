{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/moyd-crm/moyd-crm/src/components/Navigation.js"],"sourcesContent":["'use client'\n\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport { MessageSquare, Users, BarChart3, MessageCircle } from 'lucide-react'\n\nexport default function Navigation() {\n  const pathname = usePathname()\n  \n  const links = [\n    { href: '/', label: 'Dashboard', icon: BarChart3 },\n    { href: '/members', label: 'Members', icon: Users },\n    { href: '/messenger', label: 'Messenger', icon: MessageSquare },\n    { href: '/conversations', label: 'Conversations', icon: MessageCircle },\n  ]\n  \n  return (\n    <nav className=\"bg-white border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0 flex items-center\">\n              <h1 className=\"text-xl font-bold text-blue-600\">MOYD CRM</h1>\n            </div>\n            <div className=\"hidden sm:ml-6 sm:flex sm:space-x-8\">\n              {links.map((link) => {\n                const Icon = link.icon\n                const isActive = pathname === link.href\n                return (\n                  <Link\n                    key={link.href}\n                    href={link.href}\n                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${\n                      isActive\n                        ? 'border-blue-500 text-gray-900'\n                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'\n                    }`}\n                  >\n                    <Icon className=\"mr-2 h-4 w-4\" />\n                    {link.label}\n                  </Link>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  )\n}"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;;;AAJA;;;;AAMe,SAAS;;IACtB,MAAM,WAAW,IAAA,oJAAW;IAE5B,MAAM,QAAQ;QACZ;YAAE,MAAM;YAAK,OAAO;YAAa,MAAM,kOAAS;QAAC;QACjD;YAAE,MAAM;YAAY,OAAO;YAAW,MAAM,gNAAK;QAAC;QAClD;YAAE,MAAM;YAAc,OAAO;YAAa,MAAM,4OAAa;QAAC;QAC9D;YAAE,MAAM;YAAkB,OAAO;YAAiB,MAAM,4OAAa;QAAC;KACvE;IAED,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAG,WAAU;0CAAkC;;;;;;;;;;;sCAElD,6LAAC;4BAAI,WAAU;sCACZ,MAAM,GAAG,CAAC,CAAC;gCACV,MAAM,OAAO,KAAK,IAAI;gCACtB,MAAM,WAAW,aAAa,KAAK,IAAI;gCACvC,qBACE,6LAAC,0KAAI;oCAEH,MAAM,KAAK,IAAI;oCACf,WAAW,AAAC,qEAIX,OAHC,WACI,kCACA;;sDAGN,6LAAC;4CAAK,WAAU;;;;;;wCACf,KAAK,KAAK;;mCATN,KAAK,IAAI;;;;;4BAYpB;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOd;GA3CwB;;QACL,oJAAW;;;KADN","debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/moyd-crm/moyd-crm/src/lib/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)"],"names":[],"mappings":";;;;AAEoB;AAFpB;;AAEA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,IAAA,0MAAY,EAAC,aAAa","debugId":null}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/moyd-crm/moyd-crm/src/components/ConversationList.js"],"sourcesContent":["'use client'\n\nimport { formatDistanceToNow } from 'date-fns'\nimport { User } from 'lucide-react'\n\nexport default function ConversationList({ conversations, selectedId, onSelect }) {\n  if (conversations.length === 0) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center p-4\">\n        <p className=\"text-gray-500 text-sm text-center\">\n          No conversations yet. Start messaging members!\n        </p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\">\n      {conversations.map((conv) => {\n        const isSelected = conv.id === selectedId\n        const memberName = conv.member?.name || 'Unknown'\n        const timeAgo = conv.last_message_at\n          ? formatDistanceToNow(new Date(conv.last_message_at), { addSuffix: true })\n          : ''\n\n        return (\n          <button\n            key={conv.id}\n            onClick={() => onSelect(conv)}\n            className={`w-full p-4 border-b border-gray-200 hover:bg-gray-50 transition text-left ${\n              isSelected ? 'bg-blue-50' : ''\n            }`}\n          >\n            <div className=\"flex items-start\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center\">\n                  <User className=\"h-5 w-5 text-blue-600\" />\n                </div>\n              </div>\n              <div className=\"ml-3 flex-1 min-w-0\">\n                <div className=\"flex items-center justify-between\">\n                  <p className=\"text-sm font-medium text-gray-900 truncate\">\n                    {memberName}\n                  </p>\n                  {timeAgo && (\n                    <p className=\"text-xs text-gray-500\">{timeAgo}</p>\n                  )}\n                </div>\n                <p className=\"text-sm text-gray-500 truncate\">\n                  {conv.member?.phone || 'No phone'}\n                </p>\n                {conv.status && (\n                  <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium mt-1 ${\n                    conv.status === 'active' ? 'bg-green-100 text-green-800' :\n                    conv.status === 'waiting' ? 'bg-yellow-100 text-yellow-800' :\n                    conv.status === 'resolved' ? 'bg-gray-100 text-gray-800' :\n                    'bg-gray-100 text-gray-600'\n                  }`}>\n                    {conv.status}\n                  </span>\n                )}\n              </div>\n            </div>\n          </button>\n        )\n      })}\n    </div>\n  )\n}"],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAKe,SAAS,iBAAiB,KAAuC;QAAvC,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAvC;IACvC,IAAI,cAAc,MAAM,KAAK,GAAG;QAC9B,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAE,WAAU;0BAAoC;;;;;;;;;;;IAKvD;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACZ,cAAc,GAAG,CAAC,CAAC;gBAEC,cA6BR;YA9BX,MAAM,aAAa,KAAK,EAAE,KAAK;YAC/B,MAAM,aAAa,EAAA,eAAA,KAAK,MAAM,cAAX,mCAAA,aAAa,IAAI,KAAI;YACxC,MAAM,UAAU,KAAK,eAAe,GAChC,IAAA,4KAAmB,EAAC,IAAI,KAAK,KAAK,eAAe,GAAG;gBAAE,WAAW;YAAK,KACtE;YAEJ,qBACE,6LAAC;gBAEC,SAAS,IAAM,SAAS;gBACxB,WAAW,AAAC,6EAEX,OADC,aAAa,eAAe;0BAG9B,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC,6MAAI;oCAAC,WAAU;;;;;;;;;;;;;;;;sCAGpB,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAE,WAAU;sDACV;;;;;;wCAEF,yBACC,6LAAC;4CAAE,WAAU;sDAAyB;;;;;;;;;;;;8CAG1C,6LAAC;oCAAE,WAAU;8CACV,EAAA,gBAAA,KAAK,MAAM,cAAX,oCAAA,cAAa,KAAK,KAAI;;;;;;gCAExB,KAAK,MAAM,kBACV,6LAAC;oCAAK,WAAW,AAAC,yEAKjB,OAJC,KAAK,MAAM,KAAK,WAAW,gCAC3B,KAAK,MAAM,KAAK,YAAY,kCAC5B,KAAK,MAAM,KAAK,aAAa,8BAC7B;8CAEC,KAAK,MAAM;;;;;;;;;;;;;;;;;;eA/Bf,KAAK,EAAE;;;;;QAsClB;;;;;;AAGN;KA/DwB","debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/moyd-crm/moyd-crm/src/components/MessageThread.js"],"sourcesContent":["'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { Send, Loader2 } from 'lucide-react'\nimport { format } from 'date-fns'\n\nexport default function MessageThread({ conversation, onMessageSent }) {\n  const [messages, setMessages] = useState([])\n  const [messageText, setMessageText] = useState('')\n  const [sending, setSending] = useState(false)\n  const messagesEndRef = useRef(null)\n\n  useEffect(() => {\n    if (conversation?.messages) {\n      const sorted = [...conversation.messages].sort(\n        (a, b) => new Date(a.created_at) - new Date(b.created_at)\n      )\n      setMessages(sorted)\n      \n      setTimeout(() => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n      }, 100)\n    }\n  }, [conversation])\n\n  async function sendMessage() {\n    if (!messageText.trim() || !conversation?.member?.phone_e164) return\n\n    setSending(true)\n    try {\n      const response = await fetch('/api/send-message', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          phone: conversation.member.phone_e164,\n          message: messageText,\n          conversationId: conversation.id,\n        }),\n      })\n\n      if (!response.ok) throw new Error('Failed to send message')\n\n      setMessageText('')\n      onMessageSent()\n    } catch (error) {\n      console.error('Error sending message:', error)\n      alert('Failed to send message. Please try again.')\n    } finally {\n      setSending(false)\n    }\n  }\n\n  const memberName = conversation?.member?.name || 'Unknown'\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">{memberName}</h2>\n        <p className=\"text-sm text-gray-500\">{conversation?.member?.phone}</p>\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto p-6 space-y-4 bg-gray-50\">\n        {messages.length === 0 ? (\n          <div className=\"text-center text-gray-500 py-8\">\n            No messages yet. Start the conversation!\n          </div>\n        ) : (\n          messages.map((msg) => {\n            const isOutbound = msg.direction === 'outbound'\n            const time = format(new Date(msg.created_at), 'h:mm a')\n\n            return (\n              <div\n                key={msg.id}\n                className={`flex ${isOutbound ? 'justify-end' : 'justify-start'}`}\n              >\n                <div\n                  className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                    isOutbound\n                      ? 'bg-blue-600 text-white'\n                      : 'bg-white text-gray-900 border border-gray-200'\n                  }`}\n                >\n                  <p className=\"text-sm break-words\">{msg.body}</p>\n                  <p\n                    className={`text-xs mt-1 ${\n                      isOutbound ? 'text-blue-100' : 'text-gray-500'\n                    }`}\n                  >\n                    {time}\n                    {isOutbound && msg.delivery_status === 'delivered' && ' ✓'}\n                  </p>\n                </div>\n              </div>\n            )\n          })\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <div className=\"bg-white border-t border-gray-200 px-6 py-4\">\n        <div className=\"flex space-x-3\">\n          <input\n            type=\"text\"\n            value={messageText}\n            onChange={(e) => setMessageText(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault()\n                sendMessage()\n              }\n            }}\n            placeholder=\"Type a message...\"\n            disabled={sending}\n            className=\"flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100\"\n          />\n          <button\n            onClick={sendMessage}\n            disabled={sending || !messageText.trim()}\n            className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n          >\n            {sending ? (\n              <Loader2 className=\"h-5 w-5 animate-spin\" />\n            ) : (\n              <Send className=\"h-5 w-5\" />\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 533, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/moyd-crm/moyd-crm/src/app/messenger/page.js"],"sourcesContent":["'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useSearchParams } from 'next/navigation'\nimport Navigation from '@/components/Navigation'\nimport { supabase } from '@/lib/supabase'\nimport ConversationList from '@/components/ConversationList'\nimport MessageThread from '@/components/MessageThread'\nimport { MessageSquare, Send, X } from 'lucide-react'\n\nexport default function MessengerPage() {\n  const searchParams = useSearchParams()\n  const [conversations, setConversations] = useState([])\n  const [selectedConversation, setSelectedConversation] = useState(null)\n  const [loading, setLoading] = useState(true)\n  \n  // New message compose state\n  const [composeMode, setComposeMode] = useState(false)\n  const [composePhone, setComposePhone] = useState('')\n  const [composeName, setComposeName] = useState('')\n  const [composeMemberId, setComposeMemberId] = useState('')\n  const [composeMessage, setComposeMessage] = useState('')\n  const [sending, setSending] = useState(false)\n\n  useEffect(() => {\n    loadConversations()\n    \n    // Check if we're starting a new message from URL params\n    const phone = searchParams.get('phone')\n    const name = searchParams.get('name')\n    const memberId = searchParams.get('memberId')\n    \n    if (phone && name) {\n      setComposeMode(true)\n      setComposePhone(phone)\n      setComposeName(name)\n      setComposeMemberId(memberId || '')\n    }\n    \n    // Subscribe to real-time updates\n    const channel = supabase\n      .channel('messages')\n      .on('postgres_changes', \n        { event: '*', schema: 'public', table: 'messages' },\n        () => {\n          loadConversations()\n          if (selectedConversation) {\n            loadMessages(selectedConversation.id)\n          }\n        }\n      )\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [searchParams])\n\n  async function loadConversations() {\n    try {\n      const { data, error } = await supabase\n        .from('conversations')\n        .select(`\n          *,\n          member:members(id, name, phone, phone_e164),\n          messages(id, created_at, body, direction)\n        `)\n        .order('last_message_at', { ascending: false, nullsFirst: false })\n\n      if (error) throw error\n\n      setConversations(data || [])\n    } catch (error) {\n      console.error('Error loading conversations:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function loadMessages(conversationId) {\n    try {\n      const { data, error } = await supabase\n        .from('conversations')\n        .select(`\n          *,\n          member:members(id, name, phone, phone_e164),\n          messages(*)\n        `)\n        .eq('id', conversationId)\n        .single()\n\n      if (error) throw error\n\n      setSelectedConversation(data)\n      setComposeMode(false) // Exit compose mode when viewing a conversation\n    } catch (error) {\n      console.error('Error loading messages:', error)\n    }\n  }\n\n  async function sendNewMessage() {\n    if (!composeMessage.trim() || !composePhone) return\n\n    setSending(true)\n    try {\n      // Call your API route to send via BlueBubbles\n      const response = await fetch('/api/send-message', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          phone: composePhone,\n          message: composeMessage,\n          memberId: composeMemberId\n        }),\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.error || 'Failed to send message')\n      }\n\n      // Success! Clear form and refresh conversations\n      setComposeMessage('')\n      alert(`Message sent to ${composeName}!`)\n      \n      // Reload conversations to see the new one\n      await loadConversations()\n      \n      // Exit compose mode\n      setComposeMode(false)\n    } catch (error) {\n      console.error('Error sending message:', error)\n      alert(`Failed to send message: ${error.message}`)\n    } finally {\n      setSending(false)\n    }\n  }\n\n  function startNewCompose() {\n    setComposeMode(true)\n    setComposePhone('')\n    setComposeName('')\n    setComposeMemberId('')\n    setComposeMessage('')\n    setSelectedConversation(null)\n  }\n\n  if (loading) {\n    return (\n      <div>\n        <Navigation />\n        <div className=\"flex items-center justify-center h-screen\">\n          <div className=\"text-gray-500\">Loading conversations...</div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <Navigation />\n      <div className=\"h-screen flex flex-col\">\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Conversations Sidebar */}\n          <div className=\"w-80 bg-white border-r border-gray-200 flex flex-col\">\n            <div className=\"p-4 border-b border-gray-200 flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                Conversations\n              </h2>\n              <button\n                onClick={startNewCompose}\n                className=\"inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700\"\n                title=\"New Message\"\n              >\n                <MessageSquare className=\"h-4 w-4 mr-1\" />\n                New\n              </button>\n            </div>\n            <ConversationList\n              conversations={conversations}\n              selectedId={selectedConversation?.id}\n              onSelect={(conv) => loadMessages(conv.id)}\n            />\n          </div>\n\n          {/* Main Content Area */}\n          <div className=\"flex-1 flex flex-col bg-gray-50\">\n            {composeMode ? (\n              /* New Message Compose View */\n              <div className=\"flex-1 flex flex-col\">\n                <div className=\"bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between\">\n                  <h2 className=\"text-lg font-semibold text-gray-900\">\n                    New Message {composeName && `to ${composeName}`}\n                  </h2>\n                  <button\n                    onClick={() => setComposeMode(false)}\n                    className=\"text-gray-400 hover:text-gray-500\"\n                  >\n                    <X className=\"h-5 w-5\" />\n                  </button>\n                </div>\n\n                <div className=\"flex-1 p-6 overflow-y-auto\">\n                  <div className=\"max-w-2xl mx-auto space-y-4\">\n                    {/* Recipient Info */}\n                    {composeName ? (\n                      <div className=\"bg-blue-50 rounded-lg p-4 border border-blue-200\">\n                        <p className=\"text-sm font-medium text-blue-900\">Sending to:</p>\n                        <p className=\"text-lg font-semibold text-blue-900\">{composeName}</p>\n                        <p className=\"text-sm text-blue-700\">{composePhone}</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-2\">\n                        <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700\">\n                          Recipient Phone Number (E.164 format)\n                        </label>\n                        <input\n                          id=\"phone\"\n                          type=\"text\"\n                          placeholder=\"+15735551234\"\n                          value={composePhone}\n                          onChange={(e) => setComposePhone(e.target.value)}\n                          className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                        />\n                      </div>\n                    )}\n\n                    {/* Message Input */}\n                    <div className=\"space-y-2\">\n                      <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700\">\n                        Message\n                      </label>\n                      <textarea\n                        id=\"message\"\n                        rows={6}\n                        placeholder=\"Type your message...\"\n                        value={composeMessage}\n                        onChange={(e) => setComposeMessage(e.target.value)}\n                        className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                      />\n                    </div>\n\n                    {/* Send Button */}\n                    <button\n                      onClick={sendNewMessage}\n                      disabled={sending || !composeMessage.trim() || !composePhone}\n                      className=\"w-full inline-flex justify-center items-center px-4 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n                    >\n                      {sending ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                          Sending...\n                        </>\n                      ) : (\n                        <>\n                          <Send className=\"h-5 w-5 mr-2\" />\n                          Send Message\n                        </>\n                      )}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ) : selectedConversation ? (\n              /* Existing Conversation Thread */\n              <MessageThread\n                conversation={selectedConversation}\n                onMessageSent={() => {\n                  loadConversations()\n                  loadMessages(selectedConversation.id)\n                }}\n              />\n            ) : (\n              /* Empty State */\n              <div className=\"flex-1 flex items-center justify-center text-gray-400\">\n                <div className=\"text-center\">\n                  <MessageSquare className=\"mx-auto h-12 w-12 mb-4\" />\n                  <p className=\"text-lg\">Select a conversation or start a new message</p>\n                  <button\n                    onClick={startNewCompose}\n                    className=\"mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700\"\n                  >\n                    <MessageSquare className=\"mr-2 h-4 w-4\" />\n                    New Message\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"],"names":[],"mappings":"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","debugId":null}}]
}